import { useEffect, useRef } from "react";
import L from "leaflet";
import "leaflet/dist/leaflet.css";

interface MapMarker {
  id: number;
  lat: number;
  lng: number;
  siteName: string;
  wasteType: string;
  volume: number;
  date: Date;
}

interface MapViewProps {
  markers?: MapMarker[];
  onMarkerClick?: (marker: MapMarker) => void;
  height?: string;
}

/**
 * MapView component - displays Leaflet map with waste collection markers
 * Integrates v1 Kakamega County map with dynamic marker rendering
 */
export default function MapView({ markers = [], onMarkerClick, height = "400px" }: MapViewProps) {
  const mapContainer = useRef<HTMLDivElement>(null);
  const map = useRef<L.Map | null>(null);
  const markersRef = useRef<L.Marker[]>([]);

  // Initialize map
  useEffect(() => {
    if (!mapContainer.current || map.current) return;

    // Kakamega coordinates (center of municipality)
    const kakamegaCenter = [-0.3031, 34.7616] as [number, number];

    map.current = L.map(mapContainer.current).setView(kakamegaCenter, 11);

    // Add OpenStreetMap tiles
    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution: 'Â© OpenStreetMap contributors',
      maxZoom: 19,
    }).addTo(map.current);

    return () => {
      if (map.current) {
        map.current.remove();
        map.current = null;
      }
    };
  }, []);

  // Update markers when data changes
  useEffect(() => {
    if (!map.current) return;

    // Clear existing markers
    markersRef.current.forEach((marker) => map.current?.removeLayer(marker));
    markersRef.current = [];

    // Add new markers
    markers.forEach((marker) => {
      const markerColor = getMarkerColor(marker.wasteType);
      const customIcon = L.divIcon({
        className: "custom-marker",
        html: `
          <div style="
            background-color: ${markerColor};
            width: 32px;
            height: 32px;
            border-radius: 50%;
            border: 3px solid white;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.3);
            font-weight: bold;
            color: white;
            font-size: 12px;
          ">
            ${marker.volume.toFixed(0)}
          </div>
        `,
        iconSize: [32, 32],
        iconAnchor: [16, 16],
      });

      const leafletMarker = L.marker([marker.lat, marker.lng], { icon: customIcon })
        .bindPopup(
          `<div style="font-size: 12px;">
            <strong>${marker.siteName}</strong><br/>
            Type: ${marker.wasteType}<br/>
            Volume: ${marker.volume} tons<br/>
            Date: ${new Date(marker.date).toLocaleDateString()}
          </div>`
        )
        .addTo(map.current!);

      leafletMarker.on("click", () => {
        if (onMarkerClick) {
          onMarkerClick(marker);
        }
      });

      markersRef.current.push(leafletMarker);
    });

    // Fit bounds if markers exist
    if (markersRef.current.length > 0) {
      const group = new L.FeatureGroup(markersRef.current);
      map.current.fitBounds(group.getBounds().pad(0.1));
    }
  }, [markers, onMarkerClick]);

  const getMarkerColor = (wasteType: string): string => {
    switch (wasteType) {
      case "Organic":
        return "#10b981"; // green
      case "Inorganic":
        return "#f59e0b"; // amber
      case "Mixed":
        return "#ef4444"; // red
      default:
        return "#6b7280"; // gray
    }
  };

  return (
    <div
      ref={mapContainer}
      style={{
        height,
        width: "100%",
        borderRadius: "0.5rem",
        overflow: "hidden",
      }}
    />
  );
}

